# Usage:
#
# cmake -DCMAKE_TOOLCHAIN_FILE=/PATH-TO-ANDROID-SDK/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_NDK=/PATH-TO-ANDROID-SDK/ndk-bundle -DCMAKE_BUILD_TYPE=Debug -DANDROID_PLATFORM=android-19 -DANDROID_CPP_FEATURES='rtti exceptions' -DANDROID_STL="c++_shared" -DCMAKE_CXX_FLAGS='' .../android-toolchain
#
cmake_minimum_required(VERSION 3.6.0)

project(android-toolchain)

message(STATUS "Toolchain          ${CMAKE_TOOLCHAIN_FILE}")
message(STATUS "Android toolchain  ${ANDROID_TOOLCHAIN}")
message(STATUS "Android ABI        ${ANDROID_ABI}")
message(STATUS "Android platform   ${ANDROID_PLATFORM}")
message(STATUS "Android platform level ${ANDROID_PLATFORM_LEVEL}")
message(STATUS "Android STL        ${ANDROID_STL}")
message(STATUS "Android PIE        ${ANDROID_PIE}")
message(STATUS "Android C++ features ${ANDROID_CPP_FEATURES}")
message(STATUS "Android allow undefined symbols ${ANDROID_ALLOW_UNDEFINED_SYMBOLS}")
message(STATUS "Android ARM mode   ${ANDROID_ARM_MODE}")
message(STATUS "Android ARM neon   ${ANDROID_ARM_NEON}")
message(STATUS "Android disable no exec ${ANDROID_DISABLE_NO_EXECUTE}")
message(STATUS "Android disable RELRO ${ANDROID_DISABLE_RELRO}")
message(STATUS "Android disable format string checks ${ANDROID_DISABLE_FORMAT_STRING_CHECKS}")
message(STATUS "Android ccache     ${ANDROID_CCACHE}")

set(AT_C_FLAGS "${CMAKE_C_FLAGS}")
set(AT_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
set(AT_LD_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
#set( CMAKE_EXE_LINKER_FLAGS)
#CMAKE_MODULE_LINKER_FLAGS
#CMAKE_ASM_FLAGS

if(CMAKE_BUILD_TYPE STREQUAL "Release")
  string(APPEND AT_C_FLAGS " ${CMAKE_C_FLAGS_RELEASE}")
  string(APPEND AT_CXX_FLAGS " ${CMAKE_CXX_FLAGS_RELEASE}")
  string(APPEND AT_LD_FLAGS " ${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
elseif(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
  string(APPEND AT_C_FLAGS " ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
  string(APPEND AT_CXX_FLAGS " ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  string(APPEND AT_LD_FLAGS " ${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}")
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")  
  string(APPEND AT_C_FLAGS " ${CMAKE_C_FLAGS_DEBUG}")
  string(APPEND AT_CXX_FLAGS " ${CMAKE_CXX_FLAGS_DEBUG}")
  string(APPEND AT_LD_FLAGS " ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
endif()

# sets CMAKE variables when set by the CMake (e.g. on versions < 3.7)
if (NOT CMAKE_C_ANDROID_TOOLCHAIN_MACHINE)
    string(REGEX REPLACE "-clang|-4.9" "" CMAKE_C_ANDROID_TOOLCHAIN_MACHINE ${ANDROID_TOOLCHAIN_NAME})
endif (NOT CMAKE_C_ANDROID_TOOLCHAIN_MACHINE)

if (NOT CMAKE_ANDROID_NDK)
    set(CMAKE_ANDROID_NDK ${ANDROID_NDK})
endif (NOT CMAKE_ANDROID_NDK)

if (NOT CMAKE_SYSROOT)
    set(CMAKE_SYSROOT ${ANDROID_SYSROOT})
endif (NOT CMAKE_SYSROOT)

if (NOT CMAKE_ANDROID_NDK)
    set(CMAKE_ANDROID_NDK ${ANDROID_NDK})
endif (NOT CMAKE_ANDROID_NDK)

set(AT_SYSROOT_INCLUDE_DIRECTORIES " -I${CMAKE_SYSROOT}/usr/include")
string(APPEND AT_C_STANDARD_INCLUDE_DIRECTORIES ${AT_SYSROOT_INCLUDE_DIRECTORIES})
foreach(DIR ${CMAKE_C_STANDARD_INCLUDE_DIRECTORIES})
    string(APPEND AT_C_STANDARD_INCLUDE_DIRECTORIES " -I${DIR}")
endforeach()

string(APPEND AT_CXX_STANDARD_INCLUDE_DIRECTORIES ${AT_SYSROOT_INCLUDE_DIRECTORIES})
foreach(DIR ${CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES})
    string(APPEND AT_CXX_STANDARD_INCLUDE_DIRECTORIES " -I${DIR}")
endforeach()

if (CMAKE_SYSROOT)
    set(AT_COMPILETIME_SYSROOT_FLAG ${CMAKE_C_COMPILE_OPTIONS_SYSROOT}${CMAKE_SYSROOT})
endif()
if (CMAKE_C_COMPILER_TARGET)
    set(AT_C_COMPILER_TARGET_FLAG ${CMAKE_C_COMPILE_OPTIONS_TARGET}${CMAKE_C_COMPILER_TARGET})
endif()
if (CMAKE_CXX_COMPILER_TARGET)
    set(AT_CXX_COMPILER_TARGET_FLAG ${CMAKE_CXX_COMPILE_OPTIONS_TARGET}${CMAKE_CXX_COMPILER_TARGET})
endif()
if (CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN)
    set(AT_C_COMPILER_EXTERNAL_TOOLCHAIN_FLAG ${CMAKE_C_COMPILE_OPTIONS_EXTERNAL_TOOLCHAIN}${CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN})
endif()
if (CMAKE_CXX_COMPILER_TARGET)
    set(AT_CXX_COMPILER_EXTERNAL_TOOLCHAIN_FLAG ${CMAKE_CXX_COMPILE_OPTIONS_EXTERNAL_TOOLCHAIN}${CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN})
endif()

string(REPLACE "\"" "" _CXX_STANDARD_LIBRARIES ${ANDROID_CXX_STANDARD_LIBRARIES}) # Why android toolchain adds " ? Remove it!
string(CONCAT _CXX_STANDARD_LIBRARIES "-Wl," ${_CXX_STANDARD_LIBRARIES})

string(APPEND AT_C_FLAGS " ${AT_COMPILETIME_SYSROOT_FLAG} ${AT_C_COMPILER_TARGET_FLAG} ${AT_C_COMPILER_EXTERNAL_TOOLCHAIN_FLAG} ${AT_C_STANDARD_INCLUDE_DIRECTORIES}")
string(APPEND AT_CXX_FLAGS " ${AT_COMPILETIME_SYSROOT_FLAG} ${AT_CXX_COMPILER_TARGET_FLAG} ${AT_CXX_COMPILER_EXTERNAL_TOOLCHAIN_FLAG} ${AT_CXX_STANDARD_INCLUDE_DIRECTORIES}")
string(APPEND AT_LD_FLAGS " ${AT_CXX_COMPILER_TARGET_FLAG} ${AT_CXX_COMPILER_EXTERNAL_TOOLCHAIN_FLAG} ${ANDROID_LINKER_FLAGS} ${_CXX_STANDARD_LIBRARIES}")

message(STATUS "C_FLAGS ${AT_C_FLAGS}")
message(STATUS "CXX_FLAGS ${AT_CXX_FLAGS}")
message(STATUS "LD_FLAGS ${AT_LD_FLAGS}")

if(ANDROID_ABI MATCHES "^armeabi(-v7a)?$")
    set(CONAN_ARCH armv7)
elseif(ANDROID_ABI STREQUAL armeabi)
    set(CONAN_ARCH armv6)
elseif(ANDROID_ABI STREQUAL arm64-v8a)
    set(CONAN_ARCH armv8)
endif()

if(ANDROID_STL MATCHES "^stlport_")
    set(CONAN_LIBCXX libstdc++)
elseif(ANDROID_STL MATCHES "^gnustl_")
    set(CONAN_LIBCXX libstdc++)
elseif(ANDROID_STL MATCHES "^c\\+\\+_")
    set(CONAN_LIBCXX libc++)
endif()

get_filename_component(CMAKE_COMMAND_PATH ${CMAKE_COMMAND} DIRECTORY)

configure_file(${CMAKE_SOURCE_DIR}/conan_profile.in ${CMAKE_BINARY_DIR}/android_${ANDROID_PLATFORM_LEVEL}_${CONAN_ARCH}_${ANDROID_TOOLCHAIN}_${CMAKE_BUILD_TYPE})
configure_file(${CMAKE_SOURCE_DIR}/set_android_toolchain_env.sh.in ${CMAKE_BINARY_DIR}/set_android_toolchain_${ANDROID_PLATFORM_LEVEL}_${CONAN_ARCH}_${ANDROID_TOOLCHAIN}_${CMAKE_BUILD_TYPE}.sh)
